import{_ as i,o as c,c as d,a as e,b as n,w as l,d as a,e as s,r}from"../app.a6c69c54.mjs";const p={},h=a(`<h1 id="generate-true-model-parameters" tabindex="-1"><a class="header-anchor" href="#generate-true-model-parameters" aria-hidden="true">#</a> Generate True Model Parameters</h1><h2 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> Description</h2><p>Generate matrices of true model parameters for the supported true models. These matrices are intended to passed to the <code>model_matrix</code> argument of the <a href="/reference/function/powerly"><code>powerly</code></a> function.</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><div class="language-r ext-r"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#9CDCFE;">generate_model</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">...</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="arguments" tabindex="-1"><a class="header-anchor" href="#arguments" aria-hidden="true">#</a> Arguments</h2>`,6),u=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"center"}},"Name"),e("th",{style:{"text-align":"left"}},"Description")])],-1),_=e("td",{style:{"text-align":"center"}},[e("code",null,"type")],-1),m={style:{"text-align":"left"}},g=s("Character string representing the type of true model. See the "),f=e("strong",null,[e("em",null,"True Models")],-1),y=s(" section for possible values."),D=e("td",{style:{"text-align":"center"}},[e("code",null,"...")],-1),b={style:{"text-align":"left"}},v=s("Required arguments used for the generation of the true model. See the "),x=e("strong",null,[e("em",null,"True Models")],-1),C=s(" section for the arguments required for each type of true model."),k=a('<h2 id="return" tabindex="-1"><a class="header-anchor" href="#return" aria-hidden="true">#</a> Return</h2><p>A matrix containing the model parameters.</p><h2 id="true-models" tabindex="-1"><a class="header-anchor" href="#true-models" aria-hidden="true">#</a> True Models</h2><h3 id="gaussian-graphical-model" tabindex="-1"><a class="header-anchor" href="#gaussian-graphical-model" aria-hidden="true">#</a> Gaussian Graphical Model</h3><p><strong>Type:</strong> <code>ggm</code></p><p><strong><code>...</code> arguments:</strong></p>',6),A=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"center"}},"Name"),e("th",{style:{"text-align":"left"}},"Description")])],-1),E=e("tr",null,[e("td",{style:{"text-align":"center"}},[e("code",null,"nodes")]),e("td",{style:{"text-align":"left"}},[s("A single positive integer representing the number of nodes in the network (e.g., "),e("code",null,"10"),s(").")])],-1),w=e("tr",null,[e("td",{style:{"text-align":"center"}},[e("code",null,"density")]),e("td",{style:{"text-align":"left"}},[s("A single numerical value indicating the density of the network (e.g., "),e("code",null,"0.4"),s(").")])],-1),F=e("tr",null,[e("td",{style:{"text-align":"center"}},[e("code",null,"positive")]),e("td",{style:{"text-align":"left"}},[s("A single numerical value representing the proportion of positive edges in the network (e.g., "),e("code",null,"0.9"),s(" for "),e("span",{class:"katex"},[e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.8056em","vertical-align":"-0.0556em"}}),e("span",{class:"mord"},"90%")])])]),s(" positive edges).")])],-1),S=e("tr",null,[e("td",{style:{"text-align":"center"}},[e("code",null,"range")]),e("td",{style:{"text-align":"left"}},[s("A length two numerical value indicating the uniform interval from where to sample values for the partial correlations coefficients (e.g., "),e("code",null,"c(0.5, 1)"),s(").")])],-1),G=e("td",{style:{"text-align":"center"}},[e("code",null,"constant")],-1),M={style:{"text-align":"left"}},N=s("A single numerical value representing the constant described by "),R={href:"https://doi.org/10.1214%2F11-AOAS494",target:"_blank",rel:"noopener noreferrer"},T=s("Yin and Li (2011)"),B=s("."),L=e("strong",null,"Note.",-1),q=s(" For more information see the arguments of the "),P={href:"https://rdrr.io/cran/bootnet/man/genGGM.html",target:"_blank",rel:"noopener noreferrer"},V=e("code",null,"genGGM",-1),O=s(" function in the "),I={href:"https://CRAN.R-project.org/package=bootnet",target:"_blank",rel:"noopener noreferrer"},Y=e("code",null,"bootnet",-1),j=s(" package."),H=a("<p><strong>Compatible performance measures:</strong></p><ul><li><code>sen</code> (sensitivity)</li><li><code>spe</code> (specificity)</li><li><code>mcc</code> (Matthews correlation)</li><li><code>rho</code> (Pearson correlation)</li></ul>",2),J=s("See the "),U=e("strong",null,[e("em",null,"Performance Measures")],-1),z=s(" section for the "),K=e("a",{href:"/reference/function/powerly"},[e("code",null,"powerly")],-1),Q=s(" function for more information on the compatible performance measures."),W=e("p",null,[e("strong",null,"Examples")],-1),X=s("The example below shows how to generate a true network model based on a random architecture ("),Z={href:"https://doi.org/10.1126/science.286.5439.509",target:"_blank",rel:"noopener noreferrer"},$=s("Barab\xE1si & Albert, 1999"),ee=a(') with <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10</span></span></span></span> nodes, <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8056em;vertical-align:-0.0556em;"></span><span class="mord">90%</span></span></span></span> positive edge weights, and an edge density of <span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.4</span></span></span></span>.',7),se=a(`<div class="language-r ext-r line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;"># Generate true model.</span></span>
<span class="line"><span style="color:#9CDCFE;">true_model</span><span style="color:#D4D4D4;"> &lt;- </span><span style="color:#9CDCFE;">generate_model</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;ggm&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">nodes</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">density</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0.4</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">positive</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0.9</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># Load the \`qgraph\` package.</span></span>
<span class="line"><span style="color:#DCDCAA;">library</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">qgraph</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"># Plot the model.</span></span>
<span class="line"><span style="color:#9CDCFE;">qgraph</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">true_model</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2><p>Functions <a href="/reference/function/powerly"><code>powerly</code></a> and <a href="/reference/function/validate"><code>validate</code></a>.</p><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references" aria-hidden="true">#</a> References</h2>`,4),ne={class:"references"},te=s("Barab\xE1si, A.-L., & Albert, R. (1999). Emergence of Scaling in Random Networks. "),ae=e("em",null,"Science",-1),oe=s(", 286(5439), 509\u2013512. "),le={href:"https://doi.org/10.1126/science.286.5439.509",target:"_blank",rel:"noopener noreferrer"},re=s("https://doi.org/10.1126/science.286.5439.509"),ie=s("Yin, J., & Li, H. (2011). A sparse conditional Gaussian graphical model for analysis of genetical genomics data. "),ce=e("em",null,"The Annals of Applied Statistics",-1),de=s(", 5(4), 2630\u20132650. "),pe={href:"https://doi.org/10.1214/11-AOAS494",target:"_blank",rel:"noopener noreferrer"},he=s("https://doi.org/10.1214/11-AOAS494");function ue(_e,me){const o=r("RouterLink"),t=r("ExternalLinkIcon");return c(),d("div",null,[h,e("table",null,[u,e("tbody",null,[e("tr",null,[_,e("td",m,[g,n(o,{to:"/reference/function/generate-model.html#true-models"},{default:l(()=>[f]),_:1}),y])]),e("tr",null,[D,e("td",b,[v,n(o,{to:"/reference/function/generate-model.html#true-models"},{default:l(()=>[x]),_:1}),C])])])]),k,e("table",null,[A,e("tbody",null,[E,w,F,S,e("tr",null,[G,e("td",M,[N,e("a",R,[T,n(t)]),B])])])]),e("p",null,[e("em",null,[L,q,e("a",P,[V,n(t)]),O,e("a",I,[Y,n(t)]),j])]),H,e("p",null,[J,n(o,{to:"/reference/function/powerly.html#performance-measures"},{default:l(()=>[U]),_:1}),z,K,Q]),W,e("p",null,[X,e("a",Z,[$,n(t)]),ee]),se,e("div",ne,[e("p",null,[te,ae,oe,e("a",le,[re,n(t)])]),e("p",null,[ie,ce,de,e("a",pe,[he,n(t)])])])])}const fe=i(p,[["render",ue],["__file","generate-model.html.vue"]]);export{fe as default};
